{* Fetch block from injection context, expected type 'Token' *}
{[ const block = context /]}

{* Ignore block if it is empty *}
{[ if block.tokenIds.count() > 0) ]}

<div class="token-container">
  <div class="grid">
    {[ for tokenId in block.tokenIds ]}
        {[ const token = ds.tokenById(tokenId) /]}
        <div>
        {* Render large tile preview *}
        {[ inject "page_block_token_preview_large" context token /]}
        
         {[ if (token.tokenType === "Color") ]}
            {[ let group = ds.tokenGroupContainingTokenId(tokenId) /]}
            <div style="display: flex">
            <div class="token-sprout-wrapper" data-toggle="tooltip" data-template='<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>' title="#{{ token.value.hex.substring(0, 6) }}">{[ inject "page_block_token_preview_small" context token /]} {{ formattedFullTokenName(token, group) }}</div>
            </div>
        {[ else ]}
          <p class="title">{{ token.name }}</p>
        {[/]}
        {* Render description if this is not text and generic token, which are rendering values into the tile itself *}
        {[ if !token.tokenType.equals("Text") && !token.tokenType.equals("GenericToken") ]}
        <p class="description">{{ token.description }}</p>
        {[/]}
        </div>
    {[/]}
  
    <div class="spacer"></div>
    <div class="spacer"></div>
    <div class="spacer"></div>
  </div>
</div>
{[/]}