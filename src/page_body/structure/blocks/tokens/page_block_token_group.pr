{* Get experimental block payload *}
{[ const block = context /]}

{* Ignore block if it doesn't have group id set *}
{[ if block.groupId ]}

{* Fetch all tokens of this specific group *}
{[ const groupId = block.groupId /]}
{[ let group = ds.tokenGroupById(groupId) /]}

{* If empty filter, show group (shows all), if not, show only group with full name *}
<div class="token-container">
    {* Show group header consisting of group segments and current group name *}
    <p class="token-group-header">{{ formattedTokenGroupHeader(group, true) }}</p>
    <table class="token-wrapper">
    {* Render all tokens *}
    {[ for token in ds.tokensByGroupId(group.id) ]}
    <tr class="color">
        <td>
        {[ if (token.tokenType === "Color") ]}
            <div class="token-sprout-wrapper" data-toggle="tooltip" data-template='<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>' title="#{{ token.value.hex.substring(0, 6) }}">{[ inject "page_block_token_preview_small" context token /]} {{ formattedFullTokenName(token, group) }}</div>
        {[ else ]}
            <div class="token-sprout-wrapper">{[ inject "page_block_token_preview_small" context token /]} {{ formattedFullTokenName(token, group) }}</div>
        {[/]}
            
        </td>
    </tr>
    {[/]}
    </table>
</div>

{[/]}
